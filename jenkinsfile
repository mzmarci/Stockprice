pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = 'eu-west-1'
        FRONTEND_REPO = '723855297198.dkr.ecr.eu-west-1.amazonaws.com/frontend_ecr'
        MIDDLE_REPO   = '723855297198.dkr.ecr.eu-west-1.amazonaws.com/middle_ecr'
        BACKEND_REPO  = '723855297198.dkr.ecr.eu-west-1.amazonaws.com/backend_ecr'

        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        keyfile = credentials('keyfile')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/mzmarci/Stockprice.git'
            }
        }

        stage('Login to ECR') {
            steps {
                sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin 723855297198.dkr.ecr.eu-west-1.amazonaws.com'
            }
        }

        stage('Build and Push Frontend') {
            steps {
                dir('frontend') {
                    sh """
                        docker build -t frontend_ecr .
                        docker tag frontend_ecr:latest ${FRONTEND_REPO}:latest
                        docker push ${FRONTEND_REPO}:latest
                    """
                }
            }
        }

        stage('Build and Push Middle') {
            steps {
                dir('cache') {
                    sh """
                        docker build -t middle_ecr .
                        docker tag middle_ecr:latest ${MIDDLE_REPO}:latest
                        docker push ${MIDDLE_REPO}:latest
                    """
                }
            }
        }

        stage('Build and Push Backend') {
            steps {
                dir('backend') {
                    sh """
                        docker build -t backend_ecr .
                        docker tag backend_ecr:latest ${BACKEND_REPO}:latest
                        docker push ${BACKEND_REPO}:latest
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            deleteDir()
        }
        success {
            echo 'Pipeline completed successfully ✅'
        }
        failure {
            echo 'Pipeline failed ❌'
        }
    }
}
